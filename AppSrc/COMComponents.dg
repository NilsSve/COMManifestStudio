Use cCJGridColumn.pkg
Use dfLine.pkg
Use cTextEdit.pkg
Use cCJGridColumnRowIndicator.pkg
Use cRDCModalPanel.pkg
Use cManifestCheckboxCJGrid.pkg
Use cRDCRichEditor.pkg
Use cRDCButton.pkg
Use cManifestFunctionLibrary.pkg

Object oCOMComponents_dg is a cRDCModalPanel
    Set Size to 275 386
    Set Label to "Check and Copy Component Files"
    Set Icon to "CopyComponents.ico"

    Object oGridInfo_tb is a TextBox
        Set Size to 10 184
        Set Location to 61 10
        Set Label to "Note: You cannot make changes to the grid "
        Set FontItalics to True
    End_Object

    Object oCOMComponents_Grid is a cManifestCheckboxCJGrid
        Set Size to 127 366
        Set Location to 72 10
        Set pbHeaderReorders to True
        Set pbHeaderTogglesDirection to True
        Set psNoItemsText to "No data found..."
        Set pbUseAlternateRowBackgroundColor to True     
        Set piAlternateRowBackgroundColor to clAlternateRowBgColor   
        Set pbUseFocusCellRectangle to False
        Set pbShowRowFocus to True
        Set pbHotTracking to True
        Set pbSelectionEnable to True
        Set piSelectedRowBackColor to clActiveRow
        Set piHighlightBackColor   to clActiveRow

        Object oCJGridColumnRowIndicator is a cCJGridColumnRowIndicator
            Set piWidth to 23
        End_Object

        Object oCheckbox_Col is a cCJGridColumn
            Set piWidth to 57
            Set psCaption to "Copy"
            Set pbCheckbox to True
            Set peHeaderAlignment to xtpAlignmentCenter
            Set peFooterAlignment to xtpAlignmentRight
            Delegate Set piCheckboxCol to (piColumnId(Self)) // cWsCheckboxCJGrid property
            Set psToolTip to "If ticked, the file needs to be copied to the application's Programs folder."
            Set pbDrawFooterDivider to False

            Function OnGetTooltip Integer iRow String sValue String sText Returns String
                Get psToolTip to sText
                Function_Return sText
            End_Function

        End_Object

        // We don't display this column, but it is needed for the
        // grid class logic, when returning components to copy.
        Object oFileNameFirst_Col is a cCJGridColumn
            Set piWidth to 560
            Set psCaption to "Manifest Fragment Files"
            Delegate Set piFileNameFirstCol to (piColumnId(Self))    // cWsCheckboxCJGrid property
            Set pbVisible to False // N.B.
        End_Object

        Object oFileNameSecond_Col is a cCJGridColumn
            Set piWidth to 560
            Set psCaption to "Selected Manifest Fragment File's Components"
            Set psToolTip to (psCaption(Self) *  "(Files in read are missing from the Common COM (OCX/DLL) Library)")
            Set Prompt_Button_Mode to PB_PromptOn
            Set Status_Help to (psToolTip(Self))
            Delegate Set piFileNameSecondCol to (piColumnId(Self))    // cWsCheckboxCJGrid property

            // Color filename text in red if it is missing.
            Procedure OnSetDisplayMetrics Handle hoMetrics Integer iRow String ByRef sValue
                Boolean bExists
                String sFragmentFilename
                Integer iColID
                tFileStruct FilesStruct
                If (sValue <> "") Begin
                    Get piFileNameFirstCol to iColID
                    Get FindGridFileName iRow iColID to sFragmentFilename
                    Get DoesCOMComponentExist of ghoManifestFunctionLibrary sFragmentFilename to FilesStruct
                    Move FilesStruct.bExists to bExists
                    If (bExists = False) Begin
                        Set ComForeColor of hoMetrics to clRed
                    End
                End
            End_Procedure

            // Dynamically change the tooltips depending on the status of the filename.
            Function OnGetTooltip Integer iRow String sValue String sText Returns String
                Boolean bExists
                String sFragmentFilename
                tFileStruct FileStruct
                Integer iColID

                If (sValue <> "") Begin
                    Get piFileNameFirstCol to iColID
                    Get FindGridFileName iRow iColID to sFragmentFilename
                    Get DoesCOMComponentExist of ghoManifestFunctionLibrary sFragmentFilename to FileStruct
                    Move FileStruct.bExists to bExists
                    If (bExists = False) Begin
                        Move "Red text denotes that the component is missing from the Common COM Library, or if it is a CodeJock component it is not installed on this machine" to sText
                    End
                    Else Begin
                        Move "Name of the COM (OCX/DLL) component - or - if the 'Dependency' column is ticked, that this is a dependency file needed by the COM (OCX/DLL) component." to sText
                    End
                End
                Else Begin
                    Move "A missing filename means that the Manifest Fragment file is missing from the Manifest Fragment Library" to sText
                End
                Function_Return sText
            End_Function

        End_Object

        Object oDependentComponent_col is a cCJGridColumn
            Set piWidth to 100
            Set psCaption to "Dependency"
            Set pbCheckbox to True
            Set psTooltip to "If an item is ticked a dependency exists between this file and the component the manifest fragment file (in parenthesis) is pointing to."
            Set peTextAlignment to xtpAlignmentCenter

            Function OnGetTooltip Integer iRow String sValue String sText Returns String
                Get psToolTip to sText
                Function_Return sText
            End_Function

        End_Object

        // Change comment text of the editor object with text from the manifest fragment file
        // Also sets the text of the status bar.
        Procedure OnRowChanged Integer iOldRow Integer iNewSelectedRow
            Boolean bExists
            String sFragmentFilename sText
            tFileStruct FileStruct
            Integer iColID

            Forward Send OnRowChanged iOldRow iNewSelectedRow

            Get piFileNameFirstCol to iColID
            Get FindGridFileName iNewSelectedRow iColID to sFragmentFilename
            Get DoesCOMComponentExist of ghoManifestFunctionLibrary sFragmentFilename to FileStruct
            Move FileStruct.bExists to bExists
            If (bExists = False) Begin
                Move "The component is missing from the Common COM Library - or if it is a CodeJock component it is not installed on this machine." to sText
            End
            Else Begin
                Get FindCheckedState iNewSelectedRow to bExists
                If (bExists = True) Begin
                    Move "The component does not exist in the application folder and needs to be copied." to sText
                End
                Else Begin
                    Move "The component already exists in the application folder" to sText
                End
            End
            Send Show_Status_Help of (phoDialogCommandbar(Self)) sText

            // When changing row, update the manifest fragment file comment object
            Send DoShowFragmentComment iNewSelectedRow
        End_Procedure

        // This does the setting of the comment editor object text.
        Procedure DoShowFragmentComment Integer iNewSelectedRow
            tFileStruct[] FilesStructArray
            String sFileName sComment

            If (iNewSelectedRow < 0) ;
                Procedure_Return

            Get psFilesStructArray to FilesStructArray
            Move FilesStructArray[iNewSelectedRow].sFileNameFirstCol to sFileName
            If (sFileName contains ".txt") Begin
                Get ExtractManifestFragmentFileComment of ghoManifestFunctionLibrary sFileName to sComment
            End

            Set Value of oComment_edt to sComment
        End_Procedure

        // Fill the grid with data.
        Procedure DoFillGrid
            Integer i iFiles iCheckbox_Col iFileNameFirst_Col iFileNameSecond_Col iDependency_Col iMissing
            tFileStruct[] FilesStructArray
            Handle hoDataSource hoCol
            tDataSourceRow[] TheData
            Boolean bExists bDependency

            Move 0 to iMissing
            Get phoDataSource               to hoDataSource
            Get DataSource of hoDataSource  to TheData
            Get piCheckboxCol               to iCheckbox_Col
            Get piFileNameFirstCol          to iFileNameFirst_Col
            Get piFileNameSecondCol         to iFileNameSecond_Col
            Get piColumnId of oDependentComponent_col to iDependency_Col

            Get psFilesStructArray to FilesStructArray
            Move (SizeOfArray(FilesStructArray)) to iFiles
            Decrement iFiles
            For i from 0 to iFiles
                Move FilesStructArray[i].bExists to bExists
                If (bExists = False) ;
                    Increment iMissing
                Move (not(bExists))                         to TheData[i].sValue[iCheckbox_Col]
                Move FilesStructArray[i].sFileNameFirstCol  to TheData[i].sValue[iFileNameFirst_Col]
                Move FilesStructArray[i].bDependencyFile    to bDependency
                If (bDependency = True) Begin
                    Move (FilesStructArray[i].sFileNameSecondCol * "(" + FilesStructArray[i].sFileNameFirstCol + ")") to TheData[i].sValue[iFileNameSecond_Col]
                End
                Else Begin
                    Move FilesStructArray[i].sFileNameSecondCol to TheData[i].sValue[iFileNameSecond_Col]
                End
                Move bDependency to TheData[i].sValue[iDependency_Col]
            Loop

            // Initialize Grid with new data
            Send InitializeData TheData
            Send MovetoFirstRow
            Get ColumnObject iCheckbox_Col to hoCol
            Set psFooterText of hoCol to ("Total:" * String(iMissing))
            Get ColumnObject iFileNameSecond_Col to hoCol
            Set psFooterText of hoCol to "files are missing from the application folder"
        End_Procedure

        Procedure OnCreateGridControl
            Set pbEnabled of (oOpenCurrentGridItem_MenuItem(phoContextMenu(Self)))  to False
            Set pbEnabled of (oToggleGridItem_MenuItem(phoContextMenu(Self)))       to False
            Set pbEnabled of (oSelectAllGridItem_MenuItem(phoContextMenu(Self)))    to False
            Set pbEnabled of (oSelectNoneGridItem_MenuItem(phoContextMenu(Self)))   to False
            Set pbEnabled of (oSelectInvertGridItem_MenuItem(phoContextMenu(Self))) to False
        End_Procedure

        On_Key kEnter Send KeyAction of oCopy_btn
    End_Object

    Object oCopy_btn is a cRDCButton
        Set Size to 14 80
        Set Location to 253 243
        Set Label to "&Copy Components"
        Set psImage to ""
        Set Status_Help to ("Click the button to copy missing files to the application manifest file folder.")
        Set peAnchors to anBottomRight
        Set Default_State to True

        Procedure OnClick
            String[] sFragmentFilesArray sFilesArray
            Boolean bOK
            Integer iItems
            Get SelectedItems of oCOMComponents_Grid True  to sFragmentFilesArray
            Get SelectedItems of oCOMComponents_Grid False to sFilesArray
            Move (SizeOfArray(sFilesArray)) to iItems
            If (iItems = 0) Begin
                Send Info_Box "No files to process."
                Procedure_Return
            End
            Get CopyCOMComponents of ghoManifestFunctionLibrary (&sFragmentFilesArray) (&sFilesArray) to bOK
            If (bOK = True) Begin
                Send Info_Box "Ready! The COM (OCX/DLL) controls that were marked as 'missing' were successfully copied to the application folder."
                Send Close_Panel
            End
        End_Procedure

    End_Object

    Object oCancel_Btn is a cRDCButton
        Set Label    to "Close"
        Set Location to 253 327
        Set peAnchors to anBottomRight

        Procedure OnClick
            Send Close_Panel
        End_Procedure

    End_Object

//    Object oStatusBar_lc is a LineControl
//        Set Size to 2 386
//        Set Location to 272 -1
//        Set peAnchors to anBottomLeftRight
//        Set Bottom_Line_Color to clBlack
//    End_Object

    Object oComment_edt is a cRDCRichEditor
        Set Size to 32 366
        Set Location to 214 10
//        Set OEM_Translate_State to False
        Set Read_Only_State to True
        Set Status_Help to "Read only comment. Manifest Fragment Files can contain comments that describes what the component does etcetera. Each comment row must start with two forward slashes, the same as the Visual DataFlex language uses for code comments. Note: You can open the file in the editor by a double-clicking."
        Set peAnchors to anBottomLeftRight
        Set Skip_State to True
        Set Label to "Description"
    End_Object

//    Object oStatusBox_txt is a TextBox
//        Set Auto_Size_State to False
//        Set Size to 8 371
//        Set Location to 274 3
//        Set Justification_Mode to JMode_Left
//        Set peAnchors to anBottomLeftRight
//    End_Object

    Object oInfo_3d is a Container3d
        Set Size to 49 366
        Set Location to 7 10
        Set peAnchors to anTopLeftRight
        Set Color to clWhite
        Set Border_Style to Border_Normal
        Set Skip_State to True

        Object oInfo_tb is a cTextEdit
            Set Border_Style to Border_None
            Set Size to 42 350
            Set Location to 4 7
            Set peAnchors to anTopLeftRight
            Set Color to clWhite
            Set Skip_State to True
            Procedure OnStartup
                String sText
                Move "Components marked with a tick in the 'Copy' column are missing from the application folder. If the text color of the filename is black just press the 'Copy Components' button." to sText
                Move (sText * "If the file is marked with red it means that it cannot be copied because it does not exist in the Common COM Library - or if it is a CodeJock component - it is not") to sText
                Move (sText * "installed on the machine and you first need to save a copy of the component in the Common COM Library. If the filename is missing (blank) it means that the") to sText
                Move (sText * "Manifest Fragment File is missing. Finally, if the manifest fragment file is within parenthesis after the filename, the component is dependent on the file when deployed.") to sText
                Move (sText * "See e.g. the 'Visual Report Writer 2012 Developer Edition API.txt' manifest fragment file for an example.") to sText
                Set Value to sText
            End_Procedure
            Send OnStartup
        End_Object

    End_Object

    Procedure Activate_Dialog tFileStruct[] FilesStructArray
        Set psFilesStructArray of oCOMComponents_Grid to FilesStructArray
        Send Popup
    End_Procedure

    On_Key Key_Ctrl+Key_C Send KeyAction of oCopy_btn
    On_Key kCancel        Send KeyAction of oCancel_Btn
    On_Key kEnter         Send KeyAction of oCopy_btn
End_Object

// Public access method for this dialog
// Pass a struct array with the COM files that should appear in the grid.
Procedure Activate_oCOMComponents_dg tFileStruct[] ByRef FilesStructArray
    Integer iSize
    Move (SizeOfArray(FilesStructArray)) to iSize
    If (iSize = 0) Begin
        Send Info_Box "No files selected. Please try again."
        Procedure_Return
    End
    Send Activate_Dialog of oCOMComponents_dg FilesStructArray
End_Procedure
