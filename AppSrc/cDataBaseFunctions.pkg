//****************************************************************************
// $Module type: Class
// $Module name: cDataBaseFunctions
// $Author     : Nils Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
// Web-site    : http://www.rdctools.com
// Created     : 2013-10-29 @ 08:25 (Military date format: YY-MM-DD)
//
// Description : Maintenance databasefunctions for embedded (.dat) tables
//               Includes: Reindex all, Repair all, Backup all to subfolder,
//                         Restore from subfolder.
//
// $Rev History:
//    2013-10-29  Module header created
//****************************************************************************
Register_Procedure UpdateStatusBar
//Use RDCStatusPanel.pkg
//Use f_FindFile_Global.pkg
Use vWin32fh.pkg

#IFNDEF ghoMainPanel
    Global_Variable Handle ghoMainPanel
#ENDIF

// English
Define CS_Reindex_Tables      for "Reindexing of records"
Define CS_Reindexing          for "Sorting..."
Define CS_Sorting_Table       for "Sortering table"
Define CS_The_Table           for "The table"
Define CS_number              for "number"
Define CS_Is_in_use           for "is in use by another program or user and cannot be reindexed. Close the other program and try again."
Define CS_Database_Reindexed  for "The database has been repaired/sorted."
Define CS_Problem_In_Use      for "Problem occured when repairing the database. Close other programs that might have these tables open and try again."
Define CS_NoReindex_Read_Only for "Failed to sort the database. Are the *.dat files set to 'Read-Only'?"
Define CS_DuplicatesFound     for "Duplicates found in"
Define CS_CheckForBadFiles    for "tables. Check for *.BAD files in the Data folder."
Define CS_PressOKButton       for "Press the OK button to restart the program."
Define CS_RepairCheck         for "Checking if repair is needed"
Define CS_FileRepair          for "File repair..."
Define CS_RepairingFile       for "Repairing file"
Define CS_Backup_Exists       for "A backup for the current date already exists. Overwrite?"
Define CS_BackupFolderError   for "Could not create the backup folder. You probably don't have enough rights for creating folders under the programs Data folder."
Define CS_PleaseTryAgain      for "Please ensure you have enough rights and try again."
Define CS_BackupUpData        for "Backing up data"
Define CS_BackingUpTable      for "Backing up data for table"
Define CS_CopyingRecords      for "Copying records"
Define CS_Skipping            for "Skipping"
Define CS_BackupCreated       for "A back-up copy was succesfully created in folder"
Define CS_BackupNotCreated    for "An error occured and the database was NOT backed up."
Define CS_SelectBackupFolder  for "Select a folder name that starts with 'Backup' - followed by a date."
Define CS_RestoringData       for "Restoring backup data"
Define CS_RemovingRecords     for "Removing records from data table"
Define CS_SelectedFolder      for "The selected folder:"
Define CS_DatabaseMissing     for "innehåller ej nödvändiga data för att återställa databasen. Var vänlig välj en annan backup-katalog."
Define CS_RestoringTable      for "Restoring data for table"
Define CS_DatabaseRecreated   for "The database was successfully recreated from the backup"

// Swedish
//Define CS_Reindex_Tables      for "Omsortering av data"
//Define CS_Reindexing          for "Sorterar..."
//Define CS_Sorting_Table       for "Sortererar tabell"
//Define CS_The_Table           for "Tabellen"
//Define CS_number              for "nummer"
//Define CS_Is_in_use           for "används av ett annat program eller användare och kan därför ej omsorteras. Stäng det andra programmet och försök igen."
//Define CS_Database_Reindexed  for "Databasen har blivit reparerad/omsorterad."
//Define CS_Problem_In_Use      for "Problem uppstod under reparationen. Stäng övriga program som använder de här dataregistren och försök igen."
//Define CS_NoReindex_Read_Only for "Kunde ej sortera om databasen. Kanske är filattributet 'Read-Only' satt för *.dat filerna?"
//Define CS_DuplicatesFound     for "Dublett-poster upptäcktes i"
//Define CS_CheckForBadFiles    for "register. Var god kontrollera .BAD filer i programmets Data katalog."
//Define CS_PressOKButton       for "Tryck på OK knappen för att starta om programmet."
//Define CS_RepairCheck         for "Kontrollerar om filreparation är nödvändigt"
//Define CS_FileRepair          for "Filreparation..."
//Define CS_RepairingFile       for "Reparerar fil"
//Define CS_Backup_Exists       for "En backup med dagens datum existerar redan. Skriv över den?"
//Define CS_BackupFolderError   for "Kunde ej skapa backup-katalogen. Du saknar förmodligen rättigheter för att skapa kataloger under programmets Data katalog."
//Define CS_PleaseTryAgain      for "Var vänlig åtgärda och försök igen."
//Define CS_BackupUpData        for "Säkerhetskopierar data"
//Define CS_BackingUpTable      for "Säkerhetskopierar data för tabell"
//Define CS_CopyingRecords      for "Kopierar poster"
//Define CS_Skipping            for "Hoppar över"
//Define CS_BackupCreated       for "En backup-kopia av databasen har framgångsrikt skapats i katalogen"
//Define CS_BackupNotCreated    for "Ett fel uppstod och databasen har EJ säkerhetskopierats korrekt."
//Define CS_SelectBackupFolder  for "Välj en katalog vars namn startar med 'Backup' . följt av ett datum."
//Define CS_RestoringData       for "Återställer backup-data"
//Define CS_RemovingRecords     for "Tar bort nuvarande data ifrån tabell"
//Define CS_SelectedFolder      for "Den valda katalogen:"
//Define CS_DatabaseMissing     for "innehåller ej nödvändiga data för att återställa databasen. Var vänlig välj en annan backup-katalog."
//Define CS_RestoringTable      for "Återställer data för tabell"
//Define CS_DatabaseRecreated   for "Databasen har framgångsrikt återskapats ifrån backupen"

#IFNDEF ghoDatabaseFunctions
    Global_Variable Handle ghoDatabaseFunctions
#ENDIF

// Important: Only use _ONE_ instance of this object - it is using a global handle: ghoDatabaseFunctions
Class cDatabaseFunctions is a cObject

    Procedure Construct_Object
        Forward Send Construct_Object
        Move Self to ghoDatabaseFunctions
        Property String psAviFile "dbwork.avi"
    End_Procedure

    // *** MAIN PROCEDURES ***
    //
    // Reindex all files.
    Procedure DoReindex
        Integer[] iFileIsMaster iFileIsAlias

        Send DoSetAllMasterAndAlias
        Get AllMasterAndAliasFiles (&iFileIsMaster) to iFileIsAlias
        Close DF_ALL DF_PERMANENT
        Send SubReindexAllFiles iFileIsMaster iFileIsAlias
        Send DoOpenAllFiles iFileIsMaster iFileIsAlias
    End_Procedure

    // Repair & reindex all files.
    Procedure DoRepair
        Integer[] iFileIsMaster iFileIsAlias

        Send DoSetAllMasterAndAlias
        Get AllMasterAndAliasFiles (&iFileIsMaster) to iFileIsAlias
        Close DF_ALL DF_PERMANENT
        Send SubRepairAllFiles iFileIsMaster iFileIsAlias
        Send DoOpenAllFiles iFileIsMaster iFileIsAlias
    End_Procedure

    // Backs up all data tables to sub-folder of the Data folder.
    Procedure DoBackupData
        Integer[] iFileIsMaster iFileIsAlias

        Send DoSetAllMasterAndAlias
        Get AllMasterAndAliasFiles (&iFileIsMaster) to iFileIsAlias
        Send SubBackupData iFileIsMaster iFileIsAlias
        Send DoOpenAllFiles iFileIsMaster iFileIsAlias
    End_Procedure

    // Restores all data tables from sub-folder of the Data folder.
    Procedure DoRestoreData
        Integer[] iFileIsMaster iFileIsAlias
        Send DoSetAllMasterAndAlias
        Get AllMasterAndAliasFiles (&iFileIsMaster) to iFileIsAlias
        Close DF_ALL
        Send SubRestoreData iFileIsMaster iFileIsAlias
        Send DoOpenAllFiles iFileIsMaster iFileIsAlias
        Broadcast Recursive Send Refresh of (Client_ID(ghoCommandBars)) Mode_Find_or_Clear_Set
    End_Procedure


    // *** Helper procedures/functions ***

    // Re-index all tables in the filelist.
    Procedure SubReindexAllFiles Integer[] iFileIsMaster Integer[] iFileIsAlias
        String sRootName sSortString sReadyMsg sLogicalName sProgram sFileName
        Integer iTableNum iNumTables iNumTablesAdjusted iRetval iFileAlias
        Boolean bErrTables bBadExists bTableIsOpen bVerbose

        Move False to Err 

        // This will tell the error object to _not_ display
        // error numbers and source number lines, when reindexing.
        Get Verbose_State of Error_Object_Id to bVerbose
        Set Verbose_State of Error_Object_Id to False

        // Start the status panel
        If ghoStatusPanel Begin
            Send Initialize_StatusPanel to ghoStatusPanel CS_Reindex_Tables CS_Reindexing "" (psAviFile(Self))
            Send Start_StatusPanel to ghoStatusPanel
        End

        // Initialize table number; we will start searching the filelist at this number.
        Move 0 to iTableNum
        Move 0 to iNumTables
        Move 0 to iNumTablesAdjusted
        Move 0 to bErrTables

        Repeat
            // Get next used table number
            Get_Attribute DF_FILE_NEXT_USED of iTableNum to iTableNum
            If iTableNum Begin
                // Count the tables
                Increment iNumTables

                Send UpdateStatusBar of ghoStatusPanel

               // Skip FlexErrs
                Get_Attribute DF_FILE_ROOT_NAME of iTableNum to sRootName
                If (Uppercase(Trim(sRootName)) <> "FLEXERRS") Begin
                    If ghoStatusPanel ;
                        Set Title_Text of ghoStatusPanel to  (CS_Sorting_Table * sRootName)

                    Send Ignore_Error of Error_Info_Object DFERR_FILE_ACCESS_VIOLATION
                    // Open the table exclusively, we want to change it later.
                    Open iTableNum Mode DF_EXCLUSIVE
                    Get_Attribute DF_FILE_OPENED of iTableNum to bTableIsOpen
                    Send Trap_Error   of Error_Info_Object DFERR_FILE_ACCESS_VIOLATION

                    If (bTableIsOpen = False) Begin
                        // Open in normal mode and check if alias file:
                        Open iTableNum
                        Get_Attribute DF_FILE_LOGICAL_NAME of iTableNum to sLogicalName
                        Get IsFileMasterAlias iTableNum iFileIsMaster iFileIsAlias to iFileAlias
                        If (iFileAlias = DF_FILE_IS_ALIAS) Begin
                            Close iTableNum
                            Move (False) to Err
                            Move 0 to LastErr
                        End
                        Else Begin
                            Move False to bTableIsOpen
                            Send Info_Box (CS_The_Table * sRootname * String("(" + CS_number * "=" * String(iTableNum)) + ")" * CS_Is_in_use)
                            If (ghoMainPanel = 0) Begin
                                Send Stop_UI
                            End
                            Else If (ghoStatusPanel > 0) Begin
                                Send Stop_StatusPanel of ghoStatusPanel
                            End
                        End
                    End

                    Else If (bTableIsOpen = True) Begin
                        Get IndexString iTableNum to sSortString
                        If (sSortString <> "") Begin
                            Increment iNumTablesAdjusted

                            // Check for bad file and remove if exists
                            Get vFilePathExists (sRootName + ".BAD") to bBadExists
                            If (bBadExists = True) Begin 
                                Get_File_Path (sRootName + ".BAD") to sFileName
                                Get vDeleteFile sFileName to iRetval
                            End

                            // **** Re-index all table indeces ****
                            Sort iTableNum sSortString (DF_SORT_OPTION_BAD_DATA_FILE ior DF_SORT_OPTION_DUP_DATA_FILE) ghoApplication

                            Send UpdateStatusBar of ghoStatusPanel
                            Close iTableNum
                            Open iTableNum // Open in normal mode.

                            // Check for bad file: if it exists, something went wrong
                            Get vFilePathExists (sRootName + ".BAD") to bBadExists
                            If (bBadExists = True) Begin
                                Increment bErrTables
                            End
                        End
                    End
                End
            End
        Until (iTableNum = 0)

        Set Verbose_State of Error_Object_Id to bVerbose

        // Stop progress messages
        If (ghoMainPanel = 0) Begin
            Send Stop_UI
        End
        Else Begin
            If ghoStatusPanel ;
                Send Stop_StatusPanel of ghoStatusPanel
        End

        // Show that we are ready
        If (Err = False) ;
            Move CS_Database_Reindexed to sReadyMsg
        Else Begin
            If (LastErr = DFERR_FILE_ACCESS_VIOLATION) Begin
                Move CS_Problem_In_Use to sReadyMsg
            End
            Else Begin
                Move CS_NoReindex_Read_Only to sReadyMsg
            End
        End
        If (bErrTables = True) Begin
            Move (Append(sReadyMsg, ("\n" + CS_DuplicatesFound * String(bErrTables) * CS_CheckForBadFiles))) to sReadyMsg
        End
        If (ghoMainPanel = 0) Begin
            Move (sReadyMsg + "\n\n" + CS_PressOKButton) to sReadyMsg
        End
        Send Info_Box sReadyMsg
        If (ghoMainPanel = 0) Begin
            Move (Module_Name(Desktop)) to sProgram
            // Start program again.
            Runprogram (sProgram - ".exe")
        End
    End_Procedure

    // Determine the available indexes of a table.
    //
    // Arguments:
    //   Integer iTableNum - The number of the table
    //
    // Returns:
    //   String - The string to be used in the sort command if you want
    //   to re-index all indexes of the table
    Function IndexString Integer iTableNum Returns String
        String  sSortString
        Integer iLastIndex iNumSegments iCount

        Move "" to sSortString
        Get_Attribute DF_FILE_LAST_INDEX_NUMBER of iTableNum to iLastIndex

        For iCount from 1 to iLastIndex
            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of iTableNum iCount to iNumSegments
            If iNumSegments Begin
                If (Length(sSortString)) ;
                    Move (Append(sSortString, " ")) to sSortString
                Move (Append(sSortString, iCount)) to sSortString
            End
        Loop

        Function_Return sSortString
    End_Function

    // Checks if any of the DataFlex data-files needs to be repaired.
    // After the header has been repaired - also do a re-index.
    Procedure SubRepairAllFiles Integer[] iFileIsMaster Integer[] iFileIsAlias
        String sRootName sSortString sReadyMsg sRepair sLogicalName sProgram sFileName
        Integer iTableNum iNumTables iNumTablesAdjusted iRetval iFileAlias
        Boolean bErrTables bBadExists bTableIsOpen bVerbose

        Move False to Err

        // This will tell the error object to _not_ display
        // error numbers and source number lines.
        Get Verbose_State of Error_Object_Id to bVerbose
        Set Verbose_State of Error_Object_Id to False

        // Start the status panel
        If ghoStatusPanel Begin
            Send Initialize_StatusPanel to ghoStatusPanel CS_RepairCheck CS_FileRepair "" (psAviFile(Self))
            Send Start_StatusPanel to ghoStatusPanel
        End

        // Initialize table number; we will start searching the filelist at this number.
        Move 0 to iTableNum
        Move 0 to iNumTables
        Move 0 to iNumTablesAdjusted
        Move False to bErrTables

        Repeat
            // Get next used table number
            Get_Attribute DF_FILE_NEXT_USED of iTableNum to iTableNum
            If (iTableNum <> 0) Begin
                // Count the tables
                Increment iNumTables

               // Skip FlexErrs
                Get_Attribute DF_FILE_ROOT_NAME of iTableNum to sRootName
                If (Uppercase(Trim(sRootName)) <> "FLEXERRS") Begin
                    If ghoStatusPanel ;
                        Set Title_Text of ghoStatusPanel to (CS_RepairingFile * sRootName)
                    Send Ignore_Error of Error_Info_Object DFERR_FILE_ACCESS_VIOLATION

                    // Do not open table exclusively, the RepairNeeded message further down needs a normal open.
                    Open iTableNum
                    Get_Attribute DF_FILE_OPENED of iTableNum to bTableIsOpen
                    Send Trap_Error   of Error_Info_Object DFERR_FILE_ACCESS_VIOLATION

                    If (bTableIsOpen = False) Begin
                        // Open in normal mode and check if alias file:
                        Open iTableNum
                        Get_Attribute DF_FILE_LOGICAL_NAME of iTableNum to sLogicalName
                        Get IsFileMasterAlias iTableNum iFileIsMaster iFileIsAlias to iFileAlias
                        If (iFileAlias = DF_FILE_IS_ALIAS) Begin
                            Close iTableNum
                            Move (False) to FindErr
                            Move 0 to LastErr
                        End
                        Else Begin
                            Move False to bTableIsOpen
                            Send Info_Box (CS_The_Table * sRootname * String("(" + CS_number * "=" * String(iTableNum)) + ")" * CS_Is_in_use)
                            If (ghoMainPanel = 0) Begin
                                Send Stop_UI
                            End
                            Else If (ghoStatusPanel > 0) Begin
                                Send Stop_StatusPanel of ghoStatusPanel
                            End
                        End
                    End

                    Else If (bTableIsOpen = True) Begin
                        Get IndexString iTableNum to sSortString
                        If (sSortString <> "" ) Begin
                            Increment iNumTablesAdjusted

                            // Check for bad file and remove if exists
                            Get vFilePathExists (sRootName + ".BAD") to bBadExists
                            If (bBadExists = True) Begin
                                Get_File_Path (sRootName + ".BAD") to sFileName
                                Get vDeleteFile sFileName to iRetval
                            End

                            // **** Repair and reindex the table. ****
                            Get RepairNeeded iTableNum sRootName to sRepair

                            If (Uppercase(sRepair) <> "NONE") Begin
                                Get RepairDataFlexTable sRootName to iRetval
                            End

                            // Even if the head was repaired we still need to reindex
                            // Re-index all indexes for the table
                            Open iTableNum Mode DF_EXCLUSIVE
                            Sort iTableNum sSortString (DF_SORT_OPTION_BAD_DATA_FILE ior DF_SORT_OPTION_DUP_DATA_FILE) ghoApplication

                            Send UpdateStatusBar of ghoStatusPanel
                            Close iTableNum

                            // Check for bad file: if it exists, something went wrong
                            Get vFilePathExists (sRootName + ".BAD") to bBadExists
                            If (bBadExists = True) Begin
                                Increment bErrTables
                            End
                        End
                    End
                End
            End
        Until (iTableNum = 0 or FindErr = True)

        Set Verbose_State of Error_Object_Id to bVerbose

        // Stop progress messages
        If (ghoMainPanel = 0) Begin
            Send Stop_UI
        End
        Else Begin
            If ghoStatusPanel ;
                Send Stop_StatusPanel of ghoStatusPanel
        End

        // Show message that we are ready
        If (Err = False) ;
            Move CS_Database_Reindexed to sReadyMsg
        Else Begin
            If (LastErr = DFERR_FILE_ACCESS_VIOLATION) Begin
                Move CS_Problem_In_Use to sReadyMsg
            End
            Else Begin
                Move CS_NoReindex_Read_Only to sReadyMsg
            End
        End
        If (bErrTables = True) Begin
            Move (Append(sReadyMsg, ("\n" +CS_DuplicatesFound * String(bErrTables) * CS_CheckForBadFiles))) to sReadyMsg
        End
        If (ghoMainPanel = 0) Begin
            Move (sReadyMsg + "\n\n" + CS_PressOKButton) to sReadyMsg
        End
        Send Info_Box sReadyMsg
        If (ghoMainPanel = 0) Begin
            Move (Module_Name(Desktop)) to sProgram
            // Start program again.
            Runprogram (sProgram - ".exe")
        End
    End_Procedure

    // Message will open all files in filelist and set all master & alias attributes correctly.
    // Takes two params:
    //   An array with all master tables
    //   An array with all alias tables
    Procedure DoOpenAllFiles Integer[] iFileIsMaster Integer[] iFileIsAlias
        Integer hTable iFileAlias
        Boolean bOpen

        Move 0 to hTable
        Repeat
            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
            If (hTable <> 0) Begin
                Open hTable
                Get_Attribute DF_FILE_OPENED of hTable to bOpen
                If (bOpen = True) Begin
                    Get IsFileMasterAlias hTable iFileIsMaster iFileIsAlias to iFileAlias
                    If (iFileAlias = DF_FILE_IS_MASTER) Begin
                        Set_Attribute DF_FILE_ALIAS of hTable to DF_FILE_IS_MASTER
                    End
                    Else If (iFileAlias = DF_FILE_IS_ALIAS) Begin
                        Set_Attribute DF_FILE_ALIAS of hTable to DF_FILE_IS_ALIAS
                    End
                End

            End
        Until (hTable = 0)
    End_Procedure

    // Helper function.
    // Returns _two_ arrays.
    // Returns all files that are Master files in array ByRef iFileIsMaster
    // Also returns all files that are Alias files in a second array.
    // IMPORTANT: All master & alias files _must_ have been included into
    //            the DoSetAllMasterAndAlias message.
    Function AllMasterAndAliasFiles Integer[] ByRef iFileIsMaster Returns Integer[]
        Integer[] iFileIsAlias
        Integer hTable iFileAlias iSize
        Boolean bOpen

        Move 0 to hTable
        Repeat
            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
            If (hTable <> 0) Begin
                Open hTable
                Get_Attribute DF_FILE_OPENED of hTable to bOpen
                If (bOpen = True) Begin
                    Get_Attribute DF_FILE_ALIAS of hTable to iFileAlias
                    If (iFileAlias = DF_FILE_IS_MASTER) Begin
                        Move (SizeOfArray(iFileIsMaster)) to iSize
                        Move hTable to iFileIsMaster[iSize]
                    End
                    Else If (iFileAlias = DF_FILE_IS_ALIAS) Begin
                        Move (SizeOfArray(iFileIsAlias)) to iSize
                        Move hTable to iFileIsAlias[iSize]
                    End
                End
            End
        Until (hTable = 0)

        Function_Return iFileIsAlias
    End_Function

    // Helper function
    // Takes two params:
    //   1. An array with all master table numbers
    //   2. An array with all alias table numbers
    // Returns:
    //  DF_FILE_ALIAS_DEFAULT if no master or alias
    //  DF_FILE_IS_MASTER if master
    //  DF_FILE_IS_ALIAS if alias
    Function IsFileMasterAlias Handle hTable Integer[] iFileIsMaster Integer[] iFileIsAlias Returns Integer
        Integer i iSize

        Move (SizeOfArray(iFileIsMaster)) to iSize
        Decrement iSize
        For i from 0 to iSize
            If (hTable = iFileIsMaster[i]) ;
                Function_Return DF_FILE_IS_MASTER
        Loop

        Move (SizeOfArray(iFileIsAlias)) to iSize
        Decrement iSize
        For i from 0 to iSize
            If (hTable = iFileIsAlias[i]) ;
                Function_Return DF_FILE_IS_ALIAS
        Loop

        Function_Return DF_FILE_ALIAS_DEFAULT
    End_Function

    // Is a repair of the data-header necessary?
    Function RepairNeeded Integer hTable String sTableName Returns String
        String sMode sRepair
        Integer iRepairNeeded

        Move "0" to sMode

        Call_Driver hTable "DATAFLEX" Function FLEX_GET_REPAIRS_NEEDED Callback 0 Passing sTableName sMode 0 Result iRepairNeeded

        Case Begin
            Case (iRepairNeeded = FLEX_HEADER_OK)
                Move "None" to sRepair
                Case Break
            Case (iRepairNeeded = FLEX_BLOCK0_BAD)
                Move "Bad Block 0" to sRepair
                Case Break

            Case (iRepairNeeded = FLEX_HEADER_BAD)
                Move "Bad Header" to sRepair
                Case Break

            Case (iRepairNeeded = FLEX_HEADER_INTEGRITY_OFF)
                Move "Header Integrity Turned Off" to sRepair
                Case Break

            Case (iRepairNeeded = FLEX_HEADER_UNREADABLE)
                Move "Header Unreadable" to sRepair
        Case End

        Function_Return sRepair
    End_Function

    // Repair and reindex the named DataFlex data-table:
    Function RepairDataFlexTable String sTableName Returns Boolean
        String sMode
        Boolean bRepairComplete

        Move "0" to sMode   // 0=Reindex after repair.
        Call_Driver 0 "DATAFLEX" Function FLEX_REPAIR_FILE Callback 0 Passing  sTableName sMode 0 Result  bRepairComplete
        Function_Return bRepairComplete
    End_Function

    Procedure SubBackupData Integer[] iFileIsMaster Integer[] iFileIsAlias
        String sPath sToday sBackupFolder sRootName sDatFile sDateSep sDirSep
        Integer iTableNum iNumTables iRetval iDateSep iFileAlias
        Boolean bExist bSysfile
        Handle hTempFile

        Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
        Sysdate sToday
        Get_Attribute DF_DATE_SEPARATOR to iDateSep
        Move (Character(iDateSep))      to sDateSep
        // We cannot use "/" when creating the Backup folder name, it is an illegal
        // character, so we convert the "/" date separators to dashes (-) for folder names.
        Move (Replaces(sDateSep, sToday, "-"))  to sToday
        Move (SysConf(SYSCONF_DIR_SEPARATOR))   to sDirSep
        Move (sPath + sDirSep + "Backup" + String(sToday)) to sBackupFolder
        Move False to Err 

        Get vFilePathExists sBackupFolder to bExist
        If (bExist = True) Begin
            Get YesNo_Box CS_Backup_Exists to iRetval
            If (iRetval = MBR_No) ;
                Procedure_Return
        End

        Else If (bExist = False) Begin
            Get vCreateDirectory sBackupFolder to iRetval
            Move (iRetval <> 0) to Err
            If (Err = True) Begin
                Send Info_Box (CS_BackupFolderError + "\n" + CS_PleaseTryAgain)
                Procedure_Return
            End
        End

        Move 0 to iTableNum

        // Start the status panel
        If (ghoStatusPanel <> 0) Begin
            Send Initialize_StatusPanel to ghoStatusPanel CS_BackupUpData "" "" (psAviFile(Self))
            Send Start_StatusPanel to ghoStatusPanel
        End

        Repeat
            // Get next used table number
            Get_Attribute DF_FILE_NEXT_USED of iTableNum to iTableNum
            Get IsFileMasterAlias iTableNum iFileIsMaster iFileIsAlias to iFileAlias
            If (iTableNum and iFileAlias <> DF_FILE_IS_ALIAS) Begin
                // Count the tables
                Increment iNumTables

                Send UpdateStatusBar of ghoStatusPanel

               // Skip FlexErrs
                Get_Attribute DF_FILE_ROOT_NAME of iTableNum to sRootName
                If (Uppercase(Trim(sRootName)) <> "FLEXERRS") Begin

                    // To use the copy_db command the table needs to be closed.
                    Close iTableNum DF_TEMPORARY

                    // Check if the file already has been backuped.
                    // If true 'Zerofile' it first.
                    Move (sBackupFolder + sDirSep + sRootname + ".dat") to sDatFile
                    Get vFilePathExists sDatFile to bExist
                    Move (False) to bSysfile
                    If (bExist = True) Begin
                        Get_Attribute DF_FILE_NEXT_EMPTY of hTempFile to hTempFile
                        Open sDatFile as hTempFile      // If success, sets the Found flag=true.
                        Get_Attribute DF_FILE_IS_SYSTEM_FILE of hTempFile to bSysfile
//                        If (bSysfile = True) Begin
                            ZeroFile hTempFile
//                        End
//                        Else If (bSysfile = False and Found = True) Begin
//                            Set Message_Text of ghoStatusPanel to sRootName
//                            Send Update_StatusPanel of ghoStatusPanel "Tar bort gamla backup-poster"
//                            While (Found)
//                                Vfind hTempFile 0 GT
//                                If (Found) Delete hTempFile
//                                Send UpdateStatusBar of ghoStatusPanel
//                            Loop
//                        End
                        Close hTempFile
                    End
                    Else Begin
                        Set Message_Text of ghoStatusPanel to (CS_BackingUpTable * sRootName)
                        Send Update_StatusPanel of ghoStatusPanel CS_CopyingRecords
                    End

                    Copy_db sRootname to (sBackupFolder + sDirSep + sRootname) Callback ghoApplication
                    Send UpdateStatusBar of ghoStatusPanel

                    Open iTableNum
                End
                Else ;
                    Send Update_StatusPanel of ghoStatusPanel (CS_Skipping * sRootName)
            End

        Until (iTableNum = 0)

        // Stop progress messages
        If ghoStatusPanel ;
            Send Stop_StatusPanel of ghoStatusPanel
        If (Err = False) ;
            Send Info_Box (CS_BackupCreated + "\n" + sBackupFolder)
        Else If (Err = True) ;
            Send Info_Box CS_BackupNotCreated
    End_Procedure

    Procedure SubRestoreData Integer[] iFileIsMaster Integer[] iFileIsAlias
        String sPath sBackupFolder sRootName sDatFile sDirSep sCurrFiles
        Integer iTableNum iNumTables iRetval iFileAlias
        Boolean bExist

        Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
        Get vSHBrowseForFolder sPath CS_SelectBackupFolder True to sBackupFolder
        If (Length(sBackupFolder) = 0) ;
            Procedure_Return

        Move (SysConf(Sysconf_Dir_Separator)) to sDirSep
        // Start the status panel
        If ghoStatusPanel Begin
            Send Initialize_StatusPanel to ghoStatusPanel CS_RestoringData "" "" (psAviFile(Self))
            Send Start_StatusPanel to ghoStatusPanel
        End

        Send Ignore_Error of Error_Info_Object DFERR_CANT_OPEN_DATA_FILE   // = 'File not open'

        Repeat
            // Get next used table number
            Get_Attribute DF_FILE_NEXT_USED of iTableNum to iTableNum
            Get IsFileMasterAlias iTableNum iFileIsMaster iFileIsAlias to iFileAlias
            If (iTableNum and iFileAlias <> DF_FILE_IS_ALIAS) Begin
                // Count the tables
                Increment iNumTables

                Send UpdateStatusBar of ghoStatusPanel

               // Skip FlexErrs
                Get_Attribute DF_FILE_ROOT_NAME of iTableNum to sRootName
                If (Uppercase(Trim(sRootName)) <> "FLEXERRS") Begin
                    // Show table
                    Set Message_Text of ghoStatusPanel to (CS_RemovingRecords * sRootName)

                    // Removes all data by deleting the whole data table (set).
                    // It will ensure that the RowID's of saved files will be the same.
                    Move (sBackupFolder + sDirSep + sRootname + ".dat") to sDatFile
                    Get vFilePathExists sDatFile to bExist

                    If (bExist = False) Begin
                        If ghoStatusPanel ;
                            Send Stop_StatusPanel of ghoStatusPanel
                        Send Trap_Error of Error_Info_Object DFERR_CANT_OPEN_DATA_FILE
                        Open iTableNum
                        Send Info_Box (CS_SelectedFolder + "\n" + String(sBackupFolder) + "\n" + CS_DatabaseMissing)
                        Procedure_Return
                    End

                    If (bExist = True) Begin
                        Close iTableNum
                        Move (sPath + sDirSep + sRootname + ".*") to sCurrFiles
                        Get vDeleteFile sCurrFiles to iRetval
                        If (iRetval <> 0) Begin
                            If ghoStatusPanel ;
                                Send Stop_StatusPanel of ghoStatusPanel
                            Send Trap_Error of Error_Info_Object DFERR_CANT_OPEN_DATA_FILE
                            Open iTableNum
                            Move (sPath + sDirSep + sRootname) to sDatFile
                            Send Info_Box (CS_The_Table + "\n" + String(sDatFile) + "\" + CS_Is_in_use)
                            Procedure_Return
                        End
                    End

                    Set Message_Text of ghoStatusPanel to (CS_RestoringTable * sRootName)
                    // Copy data record by record:
                    Move False to Err 
                    Copy_db (sBackupFolder + sDirSep + sRootname) to sRootname Callback ghoApplication

                    If (Err = True) Begin
                        If ghoStatusPanel ;
                            Send Stop_StatusPanel of ghoStatusPanel
                        Send Trap_Error of Error_Info_Object DFERR_CANT_OPEN_DATA_FILE
                        Open iTableNum
                        Send Info_Box (CS_SelectedFolder + "\n" + String(sBackupFolder) + "\n" + CS_DatabaseMissing)
                        Procedure_Return
                    End

                    Send UpdateStatusBar of ghoStatusPanel

                    Open iTableNum
                End
                Else ;
                    Send Update_StatusPanel of ghoStatusPanel (CS_Skipping * sRootName)
            End

        Until (iTableNum = 0)

        Send Trap_Error of Error_Info_Object DFERR_CANT_OPEN_DATA_FILE

        // Stop progress messages
        If ghoStatusPanel ;
            Send Stop_StatusPanel of ghoStatusPanel
        Send Info_Box (CS_DatabaseRecreated * sBackupFolder)
    End_Procedure

    // Stub message
    Procedure DoSetAllMasterAndAlias
    End_Procedure

End_Class
